A virtual environmnet is a very useful asset to have in these type of scenarios because of the following reasons:

-scalability: By creating it we can simply replicate this environments onto other Raspberry Pis, which is something 
valuable to the project since the goal is to have a fleet of robots and not just one that works independtly.

-dependency isolation: When utilizing stacks of libraries, we tipically need specific versions of tools to ensure
compatibility. A virtual environment helps us have a version control while also isolating the dependencies. This
way there will be no interference between the system packages and other packages outside this project.

-system protection: Installing AI packages globally could break the system if anything goes wrong. This is
especially hard to troubleshoot. Also, it's easier to wipe out the project out of the device in case the YOLO
isntallation was not succesful.

-Clean development environment: The venv allows us to have only compatible package versions of (in this case)
ultralytics without the interference of anything already downloaded on the pi, such as a pre-installed python
version.

steps to create the environment:

	cd ~/Desktop/IoTLLM25/

	chmod +x venv_and_dependencies.sh

	./venv_and_dependencies.sh

Direct yourself to SLMs to start training your model:
	cd SLMs/

(recommended)If you want to use DistilGPT2, run:

	chmod +x distilgpt2_process.sh

	./distilgpt2_process.sh

If you want to use GPT2, run:

	chmod +x gpt2_process.sh

	./gpt2_process.sh

If you want to use OPT, run:

	chmod +x opt_process.sh

	./opt_process.sh

If all the models are trained and tested, then you can run spider.py to compare them in a radar graph format:
	
	python3 spider.py